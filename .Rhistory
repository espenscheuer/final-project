2+0+1
2^10
3*4
2+0+1
# My frist program
print("Hello world!")
# Which is bigger, `round.sum` or `sum.round`? (You can use the `max()` function!)
max(round.1, round.2)
# Create a variable `my.name` that contains your name
my.name <- "Morgan"
# Create a variable `name.length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name.length <- nchar(my.name)
# Print the number of letters in your name
Paste(name.length)
# Print the number of letters in your name
paste(name.length)
# Create a variable `now.doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now.doing <- paste(my.name) + "is programming"
# Create a variable `now.doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now.doing <- paste(my.name + "is programming")
# Create a variable `now.doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now.doing <- paste(my.name, is, programming, sep = " ")
# Create a variable `now.doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now.doing <- paste(my.name, "is", "programming", sep = " ")
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav.1` and `fav.2`
fav.1 <- 17
# Make the `now.doing` variable upper case
toupper(now.doing)
fav.2 <- 78
# Divide each number by the square root of 201 and save it the new value in the
# original variable
fav.1 <- fav.1 / sqrt(201)
fav.2 <- fav.2 / sqrt(201)
# Create a variable `raw.sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw.sum = fav.1 + fav.2
# Create a variable `round.sum` that is the `raw.sum` rounded to 1 decimal place.
# Use the `round()` function.
round(raw.sum, 1)
# Create two new variables `round.1` and `round.2` that are your `fav.1` and
# `fav.2` variables rounded to 1 decimal places
round.1 <- round(fav.1, 1)
round.2 <- round(fav.2, 1)
# Create a variable `sum.round` that is the sum of the rounded values
sum.round <- round.1 + round.2
# Which is bigger, `round.sum` or `sum.round`? (You can use the `max()` function!)
max(round.1, round.2)
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Las Vegas"
# Assign your name to the variable `my.name`
my.name <- "Morgan"
# Assign your height (in inches) to a variable `my.height`
my.height <- 60
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 6
# Create a variable `puppy.price`, which is how much you think a puppy costs
puppy.price <- 1000
# Create a variable `total.cost` that has the total cost of all of your puppies
total.cost <- puppies * puppy.price
# Create a boolean variable `too.expensive`, set to TRUE if the cost is greater # than $1,000
total.cost > 1000 #TRUE
total.cost < 1000 #FALSE
# Create a variable `max.puppies`, which is the number of puppies you can afford # for $1,000
max.puppies
# Create a variable `max.puppies`, which is the number of puppies you can afford # for $1,000
max.puppies <- 1000/puppy.price
install.packages("stringer")
install.packages("stringer")
---
title: "Assignment 6"
author: "Espen Scheuer, Connor Grossman, Michael Bantle, Morgan Bracey"
date: "February 13, 2018"
output: html_document
---
```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(knitr)
library(rmarkdown)
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
```
## Part 1
```{r echo=FALSE}
source("part one.R")
```
While there are many interesting statistics we can observe from this set, one of the first things I noticed is that a large percent of people are not from Washington. Only **`r percent.from.wa`** of the class are from Washington! This class is also very diverse in terms of experience in various programming languages. Out of the total members of the class **`r percent.with.experience`** of people have lots of experience and have at least taken CSE 143. Another statistic of interest is that the average experience is about a **`r average.experience`** which translates to at least CSE 142. While a large percent of people had programming experience, there was actually not many people who had much experience with R. The average experience in r is **`r average.r.experience`** which means that on average people had very little to no experience in R. While there are lots of differences in relative coding experience one thing can be said about this section is that we are caffeinated. The percent of people who have at least one cup of coffee a day is **`r percent.drinkers`**, thats a lof of coffee! One statistic that I was extremely happy with is that **`r dog.people`** are strictly fans of dogs and not cats or birds. While there are many differences in coding experience, pet choice, beverage choices, we all can say we know a little more about R now.
## Part 2
Here you can see a tables listing the skill proficiencies of students entering this class. Under each header you can see the number of students with that rows experience level 1 being no experience and 5 being highly proficient. If NA is displayed that means that no students selected that experience level. You can also see a very small table with the total number of students for reference.
```{r, echo = FALSE, message = FALSE}
source("table_data.R")
kable(final, format = "html")
kable(aggregate, format = "html")
```
## Part 3
For this data set, we decided to see the relationship between different technical skills, the Info 201 software skills and if the relationship between in and out of state students.
On the X-axis, we have the “Average 201 Skills.” This average was calculated by taking the average skill level of the student’s Command-line/terminal experience, Version Control (git & GitHub) experience, and Markdown experience.
On the Y-axis, we have the “Average programming skills” This average was taken by calculating the average skill level of the student’s R language ability, Web Programming ability and previous programming experience.
The points on the graph are colored according to whether the student was born in Washington, was born somewhere else, or chose not to answer.  If the student was born in Washington, their point is green, if they weren’t, their point is blue, and if they did not respond to this question their color is pink.
```{r, echo = FALSE, message = FALSE}
source("part3.R")
kable(final, format = "html")
kable(aggregate, format = "html")
```
The positive correlation of the graph indicates that students with more programming experience also tend to have more experinece with other software that will be used in Info 201.
## Part 4
```{r, echo = FALSE, message = FALSE}
source("part4.R")
kable(final, format = "html")
kable(aggregate, format = "html")
```
This graph demonstrates the relationship between Web programming, General Programming, and what operating system you use.  The black represents General programming experience, the blue represents web programming experience and the width represents the number of students with that skill level.  From this graph you can see that more students, regardless of operating system, have general programming experience than web programming experience.
shiny::runApp('Desktop/info201/final-project/final-project')
View(one.world.merge)
library("dplyr")
library("reshape2")
library("ggthemes")
library("maps")
library("tidyr")
library("ggplot2")
# FIRST TAB DATA
map <- map_data(map = "world")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -3]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp2) <- c("Name", "Code", "Year", "GDP")
### SECOND TAB DATA ###
one.dday <- read.csv("data/pov.dday.1.09.csv", stringsAsFactors = FALSE)
## Combines Latitude/Long Data with $1.09/day data
one.dday <- one.dday[ , -3]
one.dday <- one.dday[ , -3]
one.dday.long <- melt(one.dday, id.vars = c("Country_Name", "Country_Code"))
colnames(one.dday.long) <- c("Name", "Code", "Year", "dollars.day")
View(one.world.merge)
# Translates iso3 into country codes
country.code <- iso.alpha(map$region, n = 3)
setwd("~/Desktop/info201/final-project/final-project")
library("dplyr")
library("reshape2")
library("ggthemes")
library("maps")
library("tidyr")
library("ggplot2")
# FIRST TAB DATA
map <- map_data(map = "world")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -3]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp2) <- c("Name", "Code", "Year", "GDP")
### SECOND TAB DATA ###
one.dday <- read.csv("data/pov.dday.1.09.csv", stringsAsFactors = FALSE)
## Combines Latitude/Long Data with $1.09/day data
one.dday <- one.dday[ , -3]
one.dday <- one.dday[ , -3]
one.dday.long <- melt(one.dday, id.vars = c("Country_Name", "Country_Code"))
colnames(one.dday.long) <- c("Name", "Code", "Year", "dollars.day")
View(one.world.merge)
View(one.dday.long)
View(one.world.merge)
runApp()
library(shiny)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(maps)
library(dplyr)
library(rsconnect)
library(mapdata)
library(rcolorbrewer)
install.packages("mapdata")
install.packages("rcolorbrewer")
install.packages("RColorBrewer")
runApp()
library(shiny)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(maps)
library(dplyr)
library(rsconnect)
library(mapdata)
library(RColorBrewer)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dday.data <- dday.data.file %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == year) %>%
#na.exclude(data.file)
dday.data.file$dollars.day <- cut(data$dollars.day, breaks = c(0, 3, 5, 10, 20, 50))
dday.data <- dday.data.file %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == year) %>%
#na.exclude(data.file)
dday.data.file$dollars.day <- cut(data$dollars.day, breaks = c(0, 3, 5, 10, 20, 50))
dday.data <- dday.data.file %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == year)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == year)
View(one.world.merge)
year <- paste0("X", input$year)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == "X1985")
View(dday.data)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day"))
View(dday.data)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter("Year" == "X1985")
View(dday.data)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter(Year == "X1985")
View(dday.data)
dday.data <- one.world.merge %>%
select(c("lat", "long", "group", "region","Name", "Code", "Year", "dollars.day")) %>%
filter(Year == "X1985") %>%
na.exclude(data.file)
View(dday.data)
runApp()
runApp()
runApp()
runApp()
runApp()
View(map)
View(map)
runApp()
runApp()
runApp()
runApp()

library("dplyr")
response <- GET("http://api.worldbank.org/v2/countries?format=json")
body <- content(response, "text")
result <- fromJSON(body)
table <- data.frame(result[[2]])
i.response <- GET("http://api.worldbank.org/v2/indicators?format=json")
i.body <- content(i.response, "text")
i.result <- fromJSON(i.body)
i.table <- data.frame(i.result[[2]])
i.table <- flatten(i.table)
i.table <- flatten(i.table)
t.response <- GET("http://api.worldbank.org/v2/topics?format=json")
t.body <- content(t.response, "text")
t.result <- fromJSON(t.body)
t.table <- data.frame(t.result[[2]])
gdp.response <- GET("http://api.worldbank.org/v2/countries/all/indicators/NY.GDP.MKTP.CD?format=json&date=2010:2010")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
gdp.table <- data.frame(gdp.result[[2]])
View(gdp.table)
View(i.result)
View(i.result)
View(gdp.result)
gdp.response <- GET("http://api.worldbank.org/v2/countries/WLD/indicators/NY.GDP.MKTP.CD")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
gdp.table <- data.frame(gdp.result[[2]])
View(gdp.result)
gdp.response <- GET("http://api.worldbank.org/v2/countries/WLD/indicators/NY.GDP.MKTP.CD")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
gdp.result <- fromJSON(gdp.body)
View(gdp.result)
gdp.response <- GET("http://api.worldbank.org/v2/countries/WLD/indicators/NY.GDP.MKTP.CD?format=json")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
View(gdp.result)
gdp.table <- data.frame(gdp.result[[2]])
View(gdp.table)
gd.response <- GET("http://api.worldbank.org/v2/indicators/NY.GDP.MKTP.CD?format=json")
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
View(gd.result)
LIC <- GetJsonTable("LIC")
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD"))
gd.body <- content(gdp.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
View(LIC)
LIC <- GetJsonTable("LIC")
View(LIC)
LIC <- GetJsonTable("MIC")
View(LIC)
LIC <- GetJsonTable("LIC")
View(LIC)
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json"))
gd.body <- content(gdp.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
View(LIC)
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
View(LIC)
LIC <- GetJsonTable("LIC")
View(LIC)
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json"))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- flatten(data.frame(gd.result[[2]]))
return(gd.table)
}
LIC <- GetJsonTable("LIC")
gdp.response <- GET("http://api.worldbank.org/v2/countries/LIC/indicators/NY.GDP.MKTP.CD?format=json")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
gdp.table <- data.frame(gdp.result[[2]])
View(gdp.table)
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000"))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- flatten(data.frame(gd.result[[2]]))
return(gd.table)
}
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
gdp.response <- GET("http://api.worldbank.org/v2/countries/LIC/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000")
gdp.body <- content(gdp.response, "text")
gdp.result <- fromJSON(gdp.body)
gdp.table <- data.frame(gdp.result[[2]])
View(gdp.table)
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000"))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- flatten(data.frame(gd.result[[2]]))
return(gd.table)
}
LIC <- GetJsonTable("LIC")
GetJsonTable <- function(code) {
gd.response <- GET(paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000"))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
link <- paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000")
link <- paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD?format=json&per_page=1000")
LIC <- GetJsonTable("LIC")
?GET
GetJsonTable <- function(code) {
link <- paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD")
gd.response <- GET(link, query = list("format" = "json", "per_page" = 1000))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
GetJsonTable <- function(code) {
link <- paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD")
gd.response <- GET(link, query = list(format = json, per_page = 1000))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
LIC <- GetJsonTable("LIC")
GetJsonTable <- function(code) {
link <- paste0("http://api.worldbank.org/countries/v2/", code, "/indicators/NY.GDP.MKTP.CD")
gd.response <- GET(link, query = list(format = "json", per_page = 1000))
gd.body <- content(gd.response, "text")
gd.result <- fromJSON(gd.body)
gd.table <- data.frame(gd.result[[2]])
return(gd.table)
}
LIC <- GetJsonTable("LIC")
View(gdp.result)
#Sets up the UI
ui <- fluidPage(
titlePanel("Understanding the Worlds Econemy"),
tabsetPanel(type = "tabs",
tabPanel("Map", plotOutput("plot", click = "plot_click"),
textOutput("name"),
tableOutput("country.table"),
p("This map shows the Total Emissions and Emissions per Capita
for all of the countries around the world. When you adjust the
year it shows the top of the year range, for clarity I chose to
only show one years data. Clicking on it shows the name of the country
you have clicked on and longitude and latitude.")),
tabPanel("Table",
p("This table shows all of the data for Emmissions arounds the world.
Choose the exact years and type of emmisions in the side bar."),
tableOutput("table"))
)
)
#Sets up the UI
ui <- fluidPage(
titlePanel("Understanding the Worlds Econemy"),
tabsetPanel(type = "tabs",
tabPanel("Map", plotOutput("plot", click = "plot_click"),
textOutput("name"),
tableOutput("country.table"),
p("This map shows the Total Emissions and Emissions per Capita
for all of the countries around the world. When you adjust the
year it shows the top of the year range, for clarity I chose to
only show one years data. Clicking on it shows the name of the country
you have clicked on and longitude and latitude.")),
tabPanel("Table",
p("This table shows all of the data for Emmissions arounds the world.
Choose the exact years and type of emmisions in the side bar."),
tableOutput("table"))
)
)
# Sets up neccesary libraries
library(shiny)
#Sets up the UI
ui <- fluidPage(
titlePanel("Understanding the Worlds Econemy"),
tabsetPanel(type = "tabs",
tabPanel("Map", plotOutput("plot", click = "plot_click"),
textOutput("name"),
tableOutput("country.table"),
p("This map shows the Total Emissions and Emissions per Capita
for all of the countries around the world. When you adjust the
year it shows the top of the year range, for clarity I chose to
only show one years data. Clicking on it shows the name of the country
you have clicked on and longitude and latitude.")),
tabPanel("Table",
p("This table shows all of the data for Emmissions arounds the world.
Choose the exact years and type of emmisions in the side bar."),
tableOutput("table"))
)
)
runApp('C:/Users/eis65/Desktop/info201/Final Project')
runApp('C:/Users/eis65/Desktop/info201/Final Project')
runApp('C:/Users/eis65/Desktop/info201/Final Project')
runApp('C:/Users/eis65/Desktop/info201/Final Project')
runApp('C:/Users/eis65/Desktop/info201/Final Project')
gdp <- read.csv("gdp_data/all_gdps.csv")
gdp <- read.csv("gdp_data/all_gdps.csv")
setwd("C:/Users/eis65/Desktop/info201")
gdp <- read.csv("data/all_gdps.csv")
setwd("C:/Users/eis65/Desktop/info201")
gdp <- read.csv("data/all_gdps.csv")
setwd("C:/Users/eis65/Desktop/info201/Final Project")
gdp <- read.csv("data/all_gdps.csv")
gdp <- read.csv("data/all_gdps.csv")
View(gdp)
gdp <- read.csv("data/all_gdps.csv")
gdp <- read.csv("data/all_gdps.csv")
View(gdp)
gdp <- data.frame(read.csv("data/all_gdps.csv"))
gdp <- data.frame(read.csv("data/all_gdps.csv"))
View(gdp)
gdp <- data.frame(read.csv("data/all_gdps.csv"), stringsAsFactors = FALSE)
gdp <- data.frame(read.csv("data/all_gdps.csv"), stringsAsFactors = FALSE, sep=";")
View(gdp)
gdp <- data.frame(read.csv("data/all_gdps.csv"), stringsAsFactors = FALSE, sep=",")
gdp <- data.frame(read.csv("data/gdps.csv"), stringsAsFactors = FALSE)
gdp <- data.frame(read.csv("data/gdps.csv"), stringsAsFactors = FALSE)
View(gdp)
gdp <- data.frame(read.csv("data/gdp.csv"), stringsAsFactors = FALSE)
?read.csv
gdp <- read.csv("data/gdp.csv"), stringsAsFactors = FALSE, skip = 4)
gdp <- read.csv("data/gdp.csv"), stringsAsFactors = FALSE, skip = 3)
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 3)
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
View(gdp)
gdp <- gdp[ , -4]
gdp <- gdp[ , -3]
ggplot(data = gdp) +
geom_line(mapping = aes(y = world))
install.packages(reshape2)
install.packages("reshape2")
library("reshape2")
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
View(gdp)
gdp <- filter(gdp, Country.Name = "World")
gdp <- filter(gdp, Country.Name == "World")
gdp <- filter(gdp, Country.Name == "World")
gdp <- filter(gdp, Country.Name == "World")
ggplot(data = gdp) +
geom_line(mapping = aes())
gdp <- filter(gdp, Country.Name == "World")
gdp <- filter(gdp, Country.Name == "World")
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp <- filter(gdp, Name == "World")
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp <- filter(gdp, Name == "World")
gdp[][is.na(gdp[] ) ] = 0
gdp <- filter(gdp, Name == "World")
colnames(gdp)
is.character(gdp$Name)
unique(gdp$Name)
gdp <- select(gdp, Name == "World")
library(dplyr)
gdp <- select(gdp, Name == "World")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
gdp2 <- filter(gdp, Name == "World")
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp2 <- filter(gdp, Name == "World")
gdp2
gdp<- filter(gdp, Name == "World")
gdp <- gdp[-1, ]
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP))
ggplot(data = gdp) +
geom_path(mapping = aes(x = Year, y = GDP))
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
gdp$Year <- c(1961 : 2017)
gdp$Year <- c(1961 : 2018)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
gdp$GDP <- as.integer(gdp$GDP)
gdp$GDP <- as.integer(gdp$GDP)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp[][is.na(gdp[] ) ] = 0
gdp<- filter(gdp, Name == "World")
gdp <- gdp[-1, ]
gdp$Year <- c(1961 : 2018)
is.integer(gdp$GDP)
is.character(gdp$GDP)
gdp$GDP <- as.numeric(gdp$GDP)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
gdp <- filter(gdp, GDP == 0)
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp[][is.na(gdp[] ) ] = 0
gdp<- filter(gdp, Name == "World")
gdp <- gdp[-1, ]
gdp$Year <- c(1961 : 2018)
gdp$GDP <- as.numeric(gdp$GDP)
gdp <- filter(gdp, GDP != 0)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp[][is.na(gdp[] ) ] = 0
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp[][is.na(gdp[] ) ] = 0
gdp<- filter(gdp, Name == "Belarus")
gdp <- gdp[-1, ]
gdp$Year <- c(1961 : 2018)
gdp$GDP <- as.numeric(gdp$GDP)
gdp <- filter(gdp, GDP != 0)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1))
install.packages("ggthemes")
library(ggthemes)
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
theme_tufte()
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
p + theme_stata()
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
theme_stata()
theme_stata()
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
theme_stata()
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
theme_economist()
ggplot(data = gdp) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1)) +
theme_stata()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp) <- c("Name", "Code", "Year", "GDP")
gdp[][is.na(gdp[] ) ] = 0
View(gdp)
library("dplyr")
library("tidyr")
library("reshape2")
library("ggthemes")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp2) <- c("Name", "Code", "Year", "GDP")
gdp2[][is.na(gdp[] ) ] = 0
View(gdp)
runApp()
runApp()
map <- map_data(map="world")
runApp()
runApp()
runApp()
runApp()
source("FinalProjectData.R")
runApp()
runApp()
runApp()
View(map)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(gdp2)
View(gdp2)
View(gdp2)
View(gdp)
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
View(gdp2)
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -4]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
View(gdp2)
View(gdp)
map <- map_data(map="world")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -3]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp2) <- c("Name", "Code", "Year", "GDP")
gdp2[][is.na(gdp2[] ) ] = 0
View(gdp2)
runApp()
runApp()
runApp()
View(gdp2)
runApp()
runApp()
View(gdp2)
runApp()
runApp()
data <- filter(gdp2, Name == "Russian Federation")
View(data)
data <- drop_na(data)
num <- 1961 + length(data$year)
View(gdp)
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_line
?scale_y_continuous
View(gdp2)
View(gdp2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
View(data)
View(gdp)
runApp()
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
runApp('C:/Users/eis65/Desktop/final-project')
>substitute()
?substitute()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(rlang)
setwd("C:/Users/eis65/Desktop/final-project")
library(rlang)
install.packages("rlang")
install.packages("rlang")
library(rlang)

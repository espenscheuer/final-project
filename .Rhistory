library("dplyr")
library("reshape2")
library("ggthemes")
library("maps")
library("tidyr")
# FIRST TAB DATA
map <- map_data(map="world")
gdp <- read.csv("data/gdp.csv", stringsAsFactors = FALSE, skip = 4)
gdp <- gdp[ , -3]
gdp <- gdp[ , -3]
gdp2 <- melt(gdp, id.vars = c("Country.Name", "Country.Code"))
colnames(gdp2) <- c("Name", "Code", "Year", "GDP")
library(shiny)
library(ggplot2)
library(ggthemes)
library(tidyr)
source("spatial_utils.R")
source("FinalProjectData.R")
# Define a server function
server <- function(input, output) {
# Code for making the first tab
output$Map <- renderPlot(
ggplot(data = map) +
geom_map(map=map, aes(map_id=region, x = long, y = lat), fill = "white", color = "black")
)
# Observes clicks and displays the country name longitude and latitude
observeEvent(input$map_click, {
name <- GetCountryAtPoint(input$map_click$x, input$map_click$y)
name <<- name
text <- reactive({
if(input$World) {
name <- ("World GDP")
} else {
name <- paste(name, "GDP")
}
if(input$Scale) {
name <- paste(name, "(y scale set to World GDP)")
}
return(name)
})
output$Country <- renderText(text())
plot.data <- reactive({
data <- gdp2
if(name == "Russia") {
name = "Russian Federation"
}
if(name == "Egypt") {
name = "Egypt, Arab Rep."
}
if(name == "Venezuela") {
name = "Venezuela, RB"
}
if(name == "Republic of Congo") {
name = "Congo, Rep."
}
if(name == "Democratic Republic of the Congo") {
name = "Congo, Dem. Rep."
}
if(!input$World) {
data <- filter(data, Name == name | Code == name)
} else {
data <- filter(data, Name == "World")
}
data$Year <- c(1961 : 2019)
data$GDP <- as.numeric(data$GDP)
return(data)
})
g <- reactive({
g <- ggplot(data = plot.data()) +
geom_line(mapping = aes(x = Year, y = GDP, group = 1, fill = Name), size = 1.5) +
theme_stata()
if(input$Scale) {
g <- g + scale_y_continuous(limits = c(0, 7.904521e+13))
}
return(g)
})
output$Lines <- renderPlot(
g()
)
# Code for making the second tab
# Code for making the third tab
})
}
shinyServer(server)  # create the server
# author: Joel Ross
suppressWarnings(library(maps))
suppressWarnings(library(sp))
suppressWarnings(library(maptools))
# This function takes in a longitude and latitude (East by North)
# And returns the name of the country at that point.
# Adapted from https://stackoverflow.com/q/14334970/8716253
GetCountryAtPoint <- function(long, lat) {
# handle invalid input
if(!is.numeric(long) | !is.numeric(lat)){
return(NA)
}
# prep map and data structures
world <- map("world", fill = T, plot = F)
IDs <- sapply(strsplit(world$names, ":"), function(x) x[1])
world.sp <- map2SpatialPolygons(world, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
country.names = sapply(world.sp@polygons, function(x) x@ID)
# create spatial point from coords
point.sp = SpatialPoints(data.frame(long, lat), proj4string=CRS("+proj=longlat +datum=WGS84"))
# look up point in map
country.index <- over(point.sp, world.sp)
# get country name
country.names[country.index]
}
# Sets up neccesary libraries
library(shiny)
source('FinalProjectData.R')
#Sets up the UI
ui <- fluidPage(
titlePanel("Understanding the Worlds Economy"),
tabsetPanel(type = "tabs",
tabPanel("Viewing the World's GDP",
sidebarLayout(
sidebarPanel(
# Creates controls allowing user to choose types of info displayed
checkboxInput('World',label = "World GDP",  value = FALSE),
checkboxInput('Scale', label = "Scale to World", value = FALSE)
),
mainPanel(
plotOutput('Map', click = 'map_click'),
textOutput('Country'),
plotOutput('Lines')
)
)
),
tabPanel("Map of Poverty"),
tabPanel("Change of Wealth")
)
)
shinyUI(ui)
runApp()
library(shiny)
install.packages("shiny")
library(shiny)
runApp()
install.packages("dplyr")
library("dplyr")
library("reshape2")
library("ggthemes")
